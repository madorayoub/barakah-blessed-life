import { useState } from 'react'
import { usePrayerTimes } from '@/hooks/usePrayerTimes'
import { useTasks } from '@/hooks/useTasks'
import { useToast } from '@/hooks/use-toast'
import { format, addDays } from 'date-fns'

export function useAppleCalendar() {
  const [isGenerating, setIsGenerating] = useState(false)
  const { prayerTimes } = usePrayerTimes()
  const { tasks } = useTasks()
  const { toast } = useToast()

  const generateAdvancedICS = async (options: {
    includePrayers: boolean
    includeTasks: boolean
    days: number
    includeReminders: boolean
    reminderMinutes: number
  }) => {
    if (!prayerTimes && options.includePrayers) {
      toast({
        title: "Prayer times not available",
        description: "Please set your location in settings first.",
        variant: "destructive",
      })
      return
    }

    try {
      setIsGenerating(true)
      
      const events = []
      const today = new Date()
      const calendarName = "Barakah Tasks - Prayer Times & Tasks"
      
      // Generate prayer times
      if (options.includePrayers && prayerTimes) {
        for (let i = 0; i < options.days; i++) {
          const date = addDays(today, i)
          
          for (const prayer of prayerTimes.prayers) {
            const startTime = new Date(prayer.time)
            startTime.setFullYear(date.getFullYear(), date.getMonth(), date.getDate())
            
            const endTime = new Date(startTime.getTime() + 30 * 60000) // 30 minutes
            
            const uid = `prayer-${prayer.name}-${format(date, 'yyyyMMdd')}@barakahtasks.com`
            const dtstart = format(startTime, "yyyyMMdd'T'HHmmss")
            const dtend = format(endTime, "yyyyMMdd'T'HHmmss")
            
            let event = [
              'BEGIN:VEVENT',
              `UID:${uid}`,
              `DTSTART:${dtstart}`,
              `DTEND:${dtend}`,
              `DTSTAMP:${format(new Date(), "yyyyMMdd'T'HHmmss'Z'")}`,
              `SUMMARY:${prayer.displayName} Prayer`,
              `DESCRIPTION:Time for ${prayer.displayName} prayer\\n\\nMay Allah accept your prayers.\\n\\nGenerated by Barakah Tasks`,
              'CATEGORIES:Prayer,Islamic,Worship',
              'TRANSP:OPAQUE',
              'LOCATION:Your Location',
              'STATUS:CONFIRMED'
            ]

            // Add reminders for Apple Calendar
            if (options.includeReminders) {
              event.push(
                'BEGIN:VALARM',
                'TRIGGER:-PT' + options.reminderMinutes + 'M',
                'ACTION:DISPLAY',
                `DESCRIPTION:${prayer.displayName} Prayer in ${options.reminderMinutes} minutes`,
                'END:VALARM'
              )
            }

            event.push('END:VEVENT')
            events.push(...event)
          }
        }
      }

      // Generate tasks
      if (options.includeTasks) {
        for (const task of tasks) {
          if (task.due_date) {
            const dueDate = new Date(task.due_date)
            const uid = `task-${task.id}@barakahtasks.com`
            
            let startTime, endTime, isAllDay = false
            
            if (task.due_time) {
              const [hours, minutes] = task.due_time.split(':')
              dueDate.setHours(parseInt(hours), parseInt(minutes))
              startTime = format(dueDate, "yyyyMMdd'T'HHmmss")
              endTime = format(new Date(dueDate.getTime() + 60 * 60000), "yyyyMMdd'T'HHmmss")
            } else {
              startTime = format(dueDate, 'yyyyMMdd')
              endTime = format(addDays(dueDate, 1), 'yyyyMMdd')
              isAllDay = true
            }

            let event = [
              'BEGIN:VEVENT',
              `UID:${uid}`,
              `DTSTART${isAllDay ? ';VALUE=DATE' : ''}:${startTime}`,
              `DTEND${isAllDay ? ';VALUE=DATE' : ''}:${endTime}`,
              `DTSTAMP:${format(new Date(), "yyyyMMdd'T'HHmmss'Z'")}`,
              `SUMMARY:${task.title}`,
              `DESCRIPTION:${task.description || ''}\\n\\nFrom Barakah Tasks`,
              `CATEGORIES:Task,${task.category?.name || 'Personal'},Barakah`,
              `PRIORITY:${task.priority === 'urgent' ? '1' : task.priority === 'high' ? '2' : '3'}`,
              'STATUS:CONFIRMED'
            ]

            // Add reminder for tasks
            if (options.includeReminders && !isAllDay) {
              event.push(
                'BEGIN:VALARM',
                'TRIGGER:-PT' + options.reminderMinutes + 'M',
                'ACTION:DISPLAY',
                `DESCRIPTION:Task reminder: ${task.title}`,
                'END:VALARM'
              )
            }

            event.push('END:VEVENT')
            events.push(...event)
          }
        }
      }

      // Create the complete ICS file
      const icsContent = [
        'BEGIN:VCALENDAR',
        'VERSION:2.0',
        'PRODID:-//Barakah Tasks//Prayer Times and Tasks//EN',
        'CALSCALE:GREGORIAN',
        'METHOD:PUBLISH',
        `X-WR-CALNAME:${calendarName}`,
        'X-WR-CALDESC:Islamic prayer times and personal tasks from Barakah Tasks app',
        `X-WR-TIMEZONE:${Intl.DateTimeFormat().resolvedOptions().timeZone}`,
        'X-APPLE-CALENDAR-COLOR:#059669', // Emerald color for Apple Calendar
        'REFRESH-INTERVAL;VALUE=DURATION:P1D', // Refresh daily
        ...events,
        'END:VCALENDAR'
      ].join('\r\n')

      // Create and download the file
      const blob = new Blob([icsContent], { 
        type: 'text/calendar;charset=utf-8' 
      })
      
      const link = document.createElement('a')
      link.href = URL.createObjectURL(blob)
      
      const filename = `barakah-tasks-${format(new Date(), 'yyyy-MM-dd')}.ics`
      link.download = filename
      
      // For iOS Safari, we need to handle the download differently
      if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
        // Open in new window for iOS devices
        const newWindow = window.open(link.href, '_blank')
        if (newWindow) {
          newWindow.document.title = filename
        }
      } else {
        document.body.appendChild(link)
        link.click()
        document.body.removeChild(link)
      }

      // Cleanup URL
      setTimeout(() => URL.revokeObjectURL(link.href), 100)

      toast({
        title: "Calendar File Generated",
        description: `Successfully created ${filename} with ${events.length / 10} events. Import this file into Apple Calendar or any calendar app.`,
      })

      return {
        success: true,
        filename,
        eventCount: Math.floor(events.length / 10)
      }

    } catch (error) {
      console.error('Error generating ICS file:', error)
      toast({
        title: "Export Failed",
        description: "Could not generate calendar file. Please try again.",
        variant: "destructive",
      })
      return { success: false }
    } finally {
      setIsGenerating(false)
    }
  }

  const generateSubscriptionURL = (userId: string) => {
    // This would be implemented on your backend to serve dynamic ICS files
    return `https://your-domain.com/api/calendar/${userId}/subscribe.ics`
  }

  const generateWebCalURL = (userId: string) => {
    // Apple Calendar subscription URL format
    return `webcal://your-domain.com/api/calendar/${userId}/subscribe.ics`
  }

  return {
    generateAdvancedICS,
    generateSubscriptionURL,
    generateWebCalURL,
    isGenerating
  }
}